<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Attempts" xml:space="preserve">
    <value>attempts left</value>
  </data>
  <data name="CategoriesAll" xml:space="preserve">
    <value>All categories</value>
  </data>
  <data name="CategoryAdded" xml:space="preserve">
    <value>Category successfuly added</value>
  </data>
  <data name="CategoryId" xml:space="preserve">
    <value>Enter category id</value>
  </data>
  <data name="CategoryIdRemove" xml:space="preserve">
    <value>Enter category id you want to remove</value>
  </data>
  <data name="CategoryIdShow" xml:space="preserve">
    <value>Enter category id you want to check</value>
  </data>
  <data name="CategoryName" xml:space="preserve">
    <value>Enter name of a categoty</value>
  </data>
  <data name="CategoryRemoved" xml:space="preserve">
    <value>Catrgory successfuly removed</value>
  </data>
  <data name="CategorySubmenu" xml:space="preserve">
    <value>Category submenu</value>
  </data>
  <data name="CategoryUpdated" xml:space="preserve">
    <value>Category successfuly updated</value>
  </data>
  <data name="MainMenu" xml:space="preserve">
    <value>Main menu</value>
  </data>
  <data name="NoCategories" xml:space="preserve">
    <value>There are any categories in the database</value>
  </data>
  <data name="NoCategory" xml:space="preserve">
    <value>There is no category with that id</value>
  </data>
  <data name="NoProduct" xml:space="preserve">
    <value>There is no product with that id</value>
  </data>
  <data name="NoSupplier" xml:space="preserve">
    <value>There is no supplier with that id</value>
  </data>
  <data name="PressToContinue" xml:space="preserve">
    <value>Press any key to continue</value>
  </data>
  <data name="ProductAdded" xml:space="preserve">
    <value>Product successfuly added</value>
  </data>
  <data name="ProductBrand" xml:space="preserve">
    <value>Enter product brand</value>
  </data>
  <data name="ProductCategoryAdded" xml:space="preserve">
    <value>Category successfuly added to given product</value>
  </data>
  <data name="ProductCategoryId" xml:space="preserve">
    <value>Enter product category id</value>
  </data>
  <data name="ProductCategoryRemoved" xml:space="preserve">
    <value>Category successfuly removed from given product</value>
  </data>
  <data name="ProductCost" xml:space="preserve">
    <value>Enter product cost</value>
  </data>
  <data name="ProductId" xml:space="preserve">
    <value>Enter product id</value>
  </data>
  <data name="ProductIdRemove" xml:space="preserve">
    <value>Enter product id you want to remove</value>
  </data>
  <data name="ProductIdShow" xml:space="preserve">
    <value>Enter product id you want to check</value>
  </data>
  <data name="ProductKeyword" xml:space="preserve">
    <value>Enter product keyword</value>
  </data>
  <data name="ProductName" xml:space="preserve">
    <value>Enter product name</value>
  </data>
  <data name="ProductRemoved" xml:space="preserve">
    <value>Product successfuly removed</value>
  </data>
  <data name="ProductsByBrand" xml:space="preserve">
    <value>Products ordered by brand</value>
  </data>
  <data name="ProductsByCost" xml:space="preserve">
    <value>Products ordered by cost</value>
  </data>
  <data name="ProductsByName" xml:space="preserve">
    <value>Products ordered by name</value>
  </data>
  <data name="ProductSubmenu" xml:space="preserve">
    <value>Product submenu</value>
  </data>
  <data name="ProductSupplierId" xml:space="preserve">
    <value>Enter product supplier id</value>
  </data>
  <data name="ProductUpdated" xml:space="preserve">
    <value>Product successfuly updated</value>
  </data>
  <data name="SearchResult" xml:space="preserve">
    <value>Search result</value>
  </data>
  <data name="SearchSubmenu" xml:space="preserve">
    <value>Search submenu</value>
  </data>
  <data name="SelectItem" xml:space="preserve">
    <value>Plese select an item</value>
  </data>
  <data name="Submenu" xml:space="preserve">
    <value>Submenu</value>
  </data>
  <data name="SupplierAdded" xml:space="preserve">
    <value>Supplier successfuly added</value>
  </data>
  <data name="SupplierByFirstname" xml:space="preserve">
    <value>Suppliers ordered by name</value>
  </data>
  <data name="SupplierByLastname" xml:space="preserve">
    <value>Suppliers ordered by surname</value>
  </data>
  <data name="SupplierFirstname" xml:space="preserve">
    <value>Enter supplier firstname</value>
  </data>
  <data name="SupplierId" xml:space="preserve">
    <value>Enter supplier id</value>
  </data>
  <data name="SupplierIdRemove" xml:space="preserve">
    <value>Enter supplier id you want to remove</value>
  </data>
  <data name="SupplierKeyword" xml:space="preserve">
    <value>Enter supplier keyword</value>
  </data>
  <data name="SupplierLastname" xml:space="preserve">
    <value>Enter supplier lastname</value>
  </data>
  <data name="SupplierRemoved" xml:space="preserve">
    <value>Supplier successfuly removed</value>
  </data>
  <data name="SupplierSubmenu" xml:space="preserve">
    <value>Supplier submenu</value>
  </data>
  <data name="SuppliertIdShow" xml:space="preserve">
    <value>Enter supplier id you want to check</value>
  </data>
  <data name="SupplierUpdated" xml:space="preserve">
    <value>Supplier successfuly updated</value>
  </data>
</root>